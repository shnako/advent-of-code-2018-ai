name: Validate Solutions

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'solutions/**'

jobs:
  validate:
    runs-on: [self-hosted, Windows, X64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Validate puzzle.txt formatting and completion
      shell: pwsh
      run: |
        Write-Host "Checking puzzle.txt file formatting and completion status..."
        $failed = $false
        
        $puzzleFiles = Get-ChildItem -Path "solutions\day*\puzzle.txt" -ErrorAction SilentlyContinue
        foreach ($file in $puzzleFiles) {
          Write-Host "Checking $($file.FullName)"
          
          $lines = Get-Content $file.FullName -ErrorAction SilentlyContinue
          if ($lines.Count -eq 0) {
            Write-Host "❌ $($file.Name): File is empty"
            $failed = $true
            continue
          }
          
          # Check if first line is a URL
          $firstLine = $lines[0]
          if ($firstLine -notmatch '^https://adventofcode\.com/2018/day/\d+$') {
            Write-Host "❌ $($file.Name): First line should be the Advent of Code 2018 URL"
            Write-Host "   Found: '$firstLine'"
            $failed = $true
          }
          
          # Check if second line is empty
          if ($lines.Count -gt 1 -and $lines[1].Trim() -ne "") {
            Write-Host "❌ $($file.Name): Second line should be empty"
            $failed = $true
          }
          
          # Check if third line contains the title
          if ($lines.Count -gt 2) {
            $thirdLine = $lines[2]
            if ($thirdLine.Trim() -eq "") {
              Write-Host "❌ $($file.Name): Third line should contain the problem title"
              $failed = $true
            } elseif ($thirdLine -notmatch '^--- Day \d+: .+ ---$') {
              Write-Host "❌ $($file.Name): Third line should match format '--- Day X: Title ---'"
              Write-Host "   Found: '$thirdLine'"
              $failed = $true
            } else {
              # Check if last line indicates puzzle completion
              $lastLine = $lines[-1]
              if ($lastLine -ne "Both parts of this puzzle are complete! They provide two gold stars: **") {
                Write-Host "❌ $($file.Name): Last line should be 'Both parts of this puzzle are complete! They provide two gold stars: **'"
                Write-Host "   Found: '$lastLine'"
                $failed = $true
              } else {
                Write-Host "✅ $($file.Name): Format is correct and puzzle is complete"
              }
            }
          } else {
            Write-Host "❌ $($file.Name): File too short, missing title line"
            $failed = $true
          }
        }
        
        if ($failed) {
          Write-Host "❌ Validation failed!"
          exit 1
        } else {
          Write-Host "✅ All puzzle.txt files are correctly formatted"
        }
        
    - name: Validate solution files exist
      shell: pwsh
      run: |
        Write-Host "Checking that all required solution files exist..."
        $failed = $false
        
        for ($day = 1; $day -le 25; $day++) {
          $dayStr = "day{0:D2}" -f $day
          $dayPath = "solutions\$dayStr"
          
          if (Test-Path $dayPath) {
            Write-Host "Checking $dayStr..."
            
            $requiredFiles = @(
              "solution.go",
              "solution_test.go", 
              "input.txt",
              "puzzle.txt",
              "cmd\main.go"
            )
            
            foreach ($file in $requiredFiles) {
              $filePath = Join-Path $dayPath $file
              if (!(Test-Path $filePath)) {
                Write-Host "❌ Missing: $dayPath\$file"
                $failed = $true
              }
            }
            
            if (!$failed) {
              Write-Host "✅ $dayStr`: All required files present"
            }
          }
        }
        
        if ($failed) {
          Write-Host "❌ Validation failed!"
          exit 1
        } else {
          Write-Host "✅ All solution files are present"
        }
        
    - name: Run go vet
      shell: pwsh
      run: |
        Write-Host "Running go vet to check for common issues..."
        try {
          go vet ./...
          Write-Host "✅ No issues found by go vet"
        }
        catch {
          Write-Host "❌ go vet found issues"
          exit 1
        }
        
    - name: Run solution tests
      shell: pwsh
      run: |
        Write-Host "Running tests for all solutions..."
        try {
          go test ./solutions/... -v
          Write-Host "✅ All solution tests passed"
        }
        catch {
          Write-Host "❌ Some solution tests failed"
          exit 1
        }