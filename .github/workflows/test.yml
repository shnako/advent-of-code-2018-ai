name: Run Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: [self-hosted, Windows, X64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-
      
    - name: Download dependencies
      shell: bash
      run: go mod download
      
    - name: Check if GCC is available
      shell: bash
      id: gcc-check
      run: |
        if command -v gcc >/dev/null 2>&1; then
          echo "GCC is already available"
          echo "gcc_available=true" >> $GITHUB_OUTPUT
        else
          echo "GCC not found, will install it"
          echo "gcc_available=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Install MinGW-w64 (if GCC not available)
      uses: msys2/setup-msys2@v2
      if: steps.gcc-check.outputs.gcc_available == 'false'
      with:
        msystem: MINGW64
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-make
        
    - name: Add MinGW to PATH (if installed)
      shell: bash
      if: steps.gcc-check.outputs.gcc_available == 'false'
      run: |
        echo "D:\\a\\_temp\\msys64\\mingw64\\bin" >> $GITHUB_PATH
        export PATH="$PATH:D:/a/_temp/msys64/mingw64/bin"
        
        # Verify installation
        if command -v gcc >/dev/null 2>&1; then
          echo "✅ GCC installed successfully: $(gcc --version | head -1)"
        else
          echo "❌ GCC installation failed"
          exit 1
        fi
        
    - name: Run basic tests first
      shell: bash
      run: |
        echo "Running basic tests without coverage..."
        go test -v ./...
        echo "✅ Basic tests passed"
        
    - name: Install covdata tool
      shell: bash
      run: |
        echo "Installing covdata tool..."
        go install golang.org/x/tools/cmd/covdata@latest || echo "Failed to install covdata, continuing without it"
        
    - name: Run tests with coverage and race detection
      shell: bash
      env:
        CGO_ENABLED: 1
      run: |
        echo "Running tests with race detection and coverage..."
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        echo "✅ Test execution completed with race detection"
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Generate test report
      shell: bash
      run: |
        go install github.com/jstemmer/go-junit-report/v2@latest
        go test -v ./... 2>&1 | go-junit-report -set-exit-code > test-report.xml
      if: always()
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-report.xml
        
    - name: Test Summary
      uses: test-summary/action@v2
      with:
        paths: |
          test-report.xml
      if: always()
      
    - name: Benchmark tests
      shell: bash
      run: |
        echo "Running benchmark tests..."
        go test -bench=. -benchmem ./solutions/... | tee benchmark-results.txt || echo "No benchmarks found"
        if [ ! -f benchmark-results.txt ]; then
          echo "No benchmark results generated" > benchmark-results.txt
        fi
        echo "Benchmark tests completed"
      continue-on-error: true
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: benchmark-results.txt
        
    - name: Check for race conditions
      shell: bash
      env:
        CGO_ENABLED: 1
      run: |
        echo "Checking for race conditions..."
        go test -race ./...
        echo "✅ No race conditions detected"